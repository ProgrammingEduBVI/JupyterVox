a ** b
b + c
12 + a * 13.37 - dg / 23 ** 56 % 12 // 6
a << 2 & b >> 3 ^ c | d
12
a
a;b;c;12;36.4
~-++~-c
"hello""world"" ""12"
True + False
return 4, 5
return a
for i,j in a,b: c+d; f*7; return 4, 6
for i in a: return 5
for i,j in a,b: 
a<b>6==7!=8>=12<=89 is b is not 10 in a not in c
while a<b>6: a+6; return 4,a
if a>b: return
if a>b:\n\ta+b\n\treturn
if a>b:\n\tereturn\nelse:\n\treturn
if a>b:\n\tereturn\nelif a:\n\treturn\nelif a:\n\treturn\nelse:\n\treturn
while a>10:\n\treturn\nelse:\n\treturn\n
while a<b>6: 
if ac>12<db: 
for i in a:\n\treturn 5\nelse:\n\ta+b\n\treturn
a,c,12
b = c
a,b,c = e,d,f = 11, g, 13
*a = *b = c,b,d = *c
*a = b
*a = *b
*a = *b = e,f = 12, 13
*a
(a,b,12)+a+(12*13)
(*a, *b)
(12, a)
[a]
[12]
[a,b,12,True]
{a, b, "12", True, 13.38}
{"keys":1, "values":2, a:b, **c}
{a, b, "12", True, 13.38,}
{"keys":1, "values":2, a:b, **c,}
not a
not not not a*b+c
a and b
a or b
a1 and a2 or a3 or not not not a*12 and a or c
a if b else c
x = a or b if a or b else a
while a or b and c: return
def func1 (a): return
def func2 (a:int): return
def func3 (a=1): return
def func4 (a:int=1): return
def func5 (a, b, *a, b=1, c:float, **args): return
def func5 (a, b, *a, b=1, c:float, **args) -> 'return something': return
def func5 (a, b, **args): return
def func6 (*a, **b): return
def func7 (**kwarg): a+b; return;
def func5 (a, b, *a, b=1, c:float, **args):
[a for a in b]
[i async for i in soc]
[a for x in b if x > 10]
[a for x in b if x > 10 async for y in c if a < b for m in n]
[n**2 for n in it if n>5 if n<10]
[]
()
(a for a in b)
(i async for i in soc)
(a for x in b if x > 10)
(a for x in b if x > 10 async for y in c if a < b for m in n)
(n**2 for n in it if n>5 if n<10)
{}
{x: x**2 for x in numbers}
{x for x in numbers}
class a (b, *a, **b, a=17):
class a (b): return
class a (*a): return
class a (b, *a, **b, a=17): return
class a (**b): return
class a (a=17):
a(12,15,"xxx")
func(a, b=c, *d, **e)(b=c, *d, **e)
await f(a, c, d)
y = func()
a.b(a,12, *a, **b).c
a.filed_a
a.call_func(c).c.d
m,n = call1(12, *a).c.field
a.b.c
a.b
a.b(*a).c.d(**b).e
a[1]
a.b[1, 2, 1:2:3]
a.func(a,b)[:]
a[::].c
a[:1:].func(a=12)
a[::1].func(**b).c[:12]
x = a[:1:1].b["string"].c.func1()[a]
import a.b.c as n , x.y.z as m, n.n.n as z, t.t.t
from ....a.b.cc import b as n, x as y, t, tt as m
from ..m.n import (x as y, y as z, z as none)
sum += digit ** 3 
temp //= 10\n 
sum += digit ** order
temp //= 10
sum += digit ** order
temp //= 10
break
continue
for i in range(0,1): continue
for i in range(1,2,3): break
